{"ast":null,"code":"var _jsxFileName = \"/home/anton/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/projects/sea_battle/src/screens/InitScreen.tsx\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Field } from '../components/Field';\nimport { Cell } from '../components/Cell';\nimport { ECellType } from '../entities/field';\nimport { cloneDeepWith, cloneDeep } from \"lodash\";\nconst Row = styled.div`\ndisplay: flex;\n`;\nvar EShip;\n\n(function (EShip) {\n  EShip[EShip[\"one\"] = 0] = \"one\";\n  EShip[EShip[\"two\"] = 1] = \"two\";\n  EShip[EShip[\"three\"] = 2] = \"three\";\n  EShip[EShip[\"four\"] = 3] = \"four\";\n})(EShip || (EShip = {}));\n\nconst MAX_COUNT_BY_SHIP_TYPE = {\n  [EShip.four]: 1,\n  [EShip.three]: 2,\n  [EShip.two]: 3,\n  [EShip.one]: 4\n};\nexport const InitScreen = ({\n  field,\n  onFieldChange\n}) => {\n  console.log(\"rerender\");\n  const [cells, setCells] = useState(field.cells);\n  const [shipsState, setShipsState] = useState();\n  const [currentShip, setCurrentShip] = useState({\n    position: undefined,\n    type: EShip.four,\n    rotation: {\n      i: 1,\n      j: 0\n    }\n  });\n  const [prevPostion, setPrevPosition] = useState();\n\n  const testFree = (filed, point) => {\n    for (let i = point.i == 0 ? 0 : -1; i < 2 - Math.floor(point.i / 9); i++) {\n      for (let j = point.i == 0 ? 0 : -1; j < 2 - Math.floor(point.i / 9); j++) {\n        if (filed.cells[point.i + i][point.j + j] == ECellType.withShip) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  const addCurrentShip = (field, i, j) => {\n    const a = cloneDeep(field);\n    const axis = i * currentShip.rotation.i + currentShip.rotation.j * j;\n    const minPoint = -1;\n    const maxPoint = currentShip.type - 1;\n\n    for (let k = minPoint; k <= maxPoint; k++) {\n      const currentPoint = {\n        i: 0,\n        j: 0\n      };\n\n      if (k + axis > 9) {\n        currentPoint.i = currentShip.rotation.j * i + currentShip.rotation.i * (9 - k + minPoint);\n        currentPoint.j = (9 - k + minPoint) * currentShip.rotation.j + j * currentShip.rotation.i;\n        a.cells[currentPoint.i][currentPoint.j] = ECellType.withShip;\n      } else if (k + axis < 0) {\n        currentPoint.i = i * currentShip.rotation.j + currentShip.rotation.i * (Math.abs(k) + maxPoint);\n        currentPoint.j = (Math.abs(k) + maxPoint) * currentShip.rotation.j + currentShip.rotation.i * j;\n        a.cells[currentPoint.i][currentPoint.j] = ECellType.withShip;\n      } else {\n        currentPoint.i = i + k * currentShip.rotation.i;\n        currentPoint.j = j + k * currentShip.rotation.j;\n        a.cells[currentPoint.i][currentPoint.j] = ECellType.withShip;\n      }\n\n      if (testFree(field, currentPoint)) {\n        return cells;\n      }\n    }\n\n    return a.cells;\n  };\n\n  const handleMouseOver = useCallback((i, j) => () => {\n    setCells(cloneDeep(addCurrentShip(field, i, j))); // TODO\n    // change field with onFieldChange\n  }, [cells]);\n  const handleOnClick = useCallback((i, j) => () => {\n    onFieldChange(cloneDeep({\n      cells: addCurrentShip(field, i, j)\n    }));\n  }, [field]);\n  useEffect(() => {\n    document.addEventListener('keypress', e => {\n      console.log(2);\n\n      if (e.keyCode === 32) {\n        console.log(3);\n        setCurrentShip(cloneDeepWith(currentShip, value => {\n          //    const a : ICurrentShip = cloneDeep(value)\n          //    a.rotation.i = 1-a.rotation.i\n          //    a.rotation.j = 1-a.rotation.j\n          //    return a\n          return cloneDeep(currentShip);\n        }));\n      }\n    });\n  }, [currentShip]); // TODO\n  // space pressed\n  // click\n\n  return /*#__PURE__*/React.createElement(Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, cells.map((row, i) => /*#__PURE__*/React.createElement(Row, {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, row.map((type, j) => /*#__PURE__*/React.createElement(Cell, {\n    type: type,\n    key: `${i}-${j}`,\n    onMouseOver: handleMouseOver(i, j),\n    onClick: handleOnClick(i, j),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 25\n    }\n  })))));\n};","map":{"version":3,"sources":["/home/anton/Рабочий стол/projects/sea_battle/src/screens/InitScreen.tsx"],"names":["React","useState","useCallback","useEffect","styled","Field","Cell","ECellType","cloneDeepWith","cloneDeep","Row","div","EShip","MAX_COUNT_BY_SHIP_TYPE","four","three","two","one","InitScreen","field","onFieldChange","console","log","cells","setCells","shipsState","setShipsState","currentShip","setCurrentShip","position","undefined","type","rotation","i","j","prevPostion","setPrevPosition","testFree","filed","point","Math","floor","withShip","addCurrentShip","a","axis","minPoint","maxPoint","k","currentPoint","abs","handleMouseOver","handleOnClick","document","addEventListener","e","keyCode","value","map","row"],"mappings":"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","sourcesContent":["import React, { FC, useState, useCallback, useEffect } from 'react'\n\nimport styled from 'styled-components'\n\nimport { Field } from '../components/Field'\nimport { Cell } from '../components/Cell'\nimport { IField, ECellType } from '../entities/field'\nimport { cloneDeepWith, cloneDeep, isUndefined } from \"lodash\"\nimport { Console } from 'console'\n\nconst Row = styled.div`\ndisplay: flex;\n`\n\ntype TPosition = {\n    i: number\n    j: number\n}\n\nexport interface IInitScreenProps {\n    field: IField\n    onFieldChange: (field: IField) => void\n}\n\nenum EShip {\n    one,\n    two,\n    three,\n    four\n}\n\ntype IShipsState = Record<EShip, {\n    count: number\n    placedShips: TPosition[]\n}>\n\ninterface ICurrentShip {\n    position?: TPosition\n    type: EShip\n    rotation: TPosition\n}\n\nconst MAX_COUNT_BY_SHIP_TYPE = {\n  [EShip.four]: 1,\n  [EShip.three]: 2,\n  [EShip.two]: 3,\n  [EShip.one]: 4,\n}\n\nexport const InitScreen: FC<IInitScreenProps> = ({ field, onFieldChange }) => {\n    console.log(\"rerender\")\n    const [cells, setCells] = useState<ECellType[][]>(field.cells)\n    const [shipsState, setShipsState] = useState<IShipsState>();\n    const [currentShip, setCurrentShip] = useState<ICurrentShip>({\n      position: undefined,\n      type: EShip.four,\n      rotation: {\n          i: 1,\n          j: 0\n        }\n    });\n\n    const [prevPostion, setPrevPosition] = useState<TPosition>()\n\n    const testFree = (filed : IField, point : TPosition) => {\n        for(let i = point.i==0?0:-1; i < 2-Math.floor(point.i/9); i++){\n            for(let j = point.i==0?0:-1; j < 2-Math.floor(point.i/9); j++){\n                if(filed.cells[point.i + i][point.j + j] == ECellType.withShip){\n                    return true\n                }\n            }\n        }\n        return false\n    }\n\n    const addCurrentShip = (field : IField, i: number, j: number) => {\n        const a : IField = cloneDeep(field)  \n        const axis = i * currentShip.rotation.i + currentShip.rotation.j * j\n        const minPoint : number = -1\n        const maxPoint : number = currentShip.type-1\n        for(let k = minPoint; k <= maxPoint; k++){\n            const currentPoint : TPosition = {\n                i: 0,\n                j: 0\n            }\n            if(k + axis > 9){\n                currentPoint.i = currentShip.rotation.j * i + currentShip.rotation.i * (9 - k + minPoint)\n                currentPoint.j = (9 - k + minPoint) * currentShip.rotation.j + j * currentShip.rotation.i\n                a.cells[currentPoint.i][currentPoint.j] = ECellType.withShip;\n            }else if(k + axis < 0){\n                currentPoint.i = i * currentShip.rotation.j + currentShip.rotation.i * (Math.abs(k) + maxPoint)\n                currentPoint.j = (Math.abs(k) + maxPoint) * currentShip.rotation.j + currentShip.rotation.i * j\n                a.cells[currentPoint.i][currentPoint.j] = ECellType.withShip;\n            }else{\n                currentPoint.i = i + k * currentShip.rotation.i\n                currentPoint.j = j + k * currentShip.rotation.j\n                a.cells[currentPoint.i][currentPoint.j] = ECellType.withShip;\n            }\n            if(testFree(field, currentPoint)){\n                return cells\n            }\n        }\n        return a.cells\n    }\n\n    const handleMouseOver = useCallback((i: number, j: number) => () => {\n        \n        setCells(cloneDeep(addCurrentShip(field, i, j)))\n        \n      // TODO\n      // change field with onFieldChange\n    }, [cells])\n\n    const handleOnClick = useCallback((i: number, j: number) => () => {\n        onFieldChange(cloneDeep({cells: addCurrentShip(field, i, j)}))\n    }, [field])\n\n    useEffect(() => {\n        document.addEventListener('keypress', e => {\n          console.log(2)\n          if (e.keyCode === 32) {\n            console.log(3)\n            setCurrentShip(cloneDeepWith(currentShip, (value : ICurrentShip) => {\n            //    const a : ICurrentShip = cloneDeep(value)\n            //    a.rotation.i = 1-a.rotation.i\n            //    a.rotation.j = 1-a.rotation.j\n            //    return a\n                return cloneDeep(currentShip)\n            }))\n          }\n      })\n    }, [currentShip])\n\n    // TODO\n    // space pressed\n    // click\n\n\n    return (\n        <Field>\n            {cells.map((row, i) => (\n                <Row key={i}>\n                    {row.map((type, j) => (\n                        <Cell\n                          type={type}\n                          key={`${i}-${j}`}\n                          onMouseOver={handleMouseOver(i, j)}\n                          onClick={handleOnClick(i, j)}\n                          />\n                     ))}\n                </Row>\n            ))}\n        </Field>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}