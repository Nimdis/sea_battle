{"ast":null,"code":"import _initializerDefineProperty from \"/home/anton/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/projects/sea_battle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/home/anton/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/projects/sea_battle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/home/anton/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/projects/sea_battle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _temp;\n\nimport { observable, action } from 'mobx';\nimport { ECellType } from './field';\nexport let EShip;\n\n(function (EShip) {\n  EShip[EShip[\"one\"] = 0] = \"one\";\n  EShip[EShip[\"two\"] = 1] = \"two\";\n  EShip[EShip[\"three\"] = 2] = \"three\";\n  EShip[EShip[\"four\"] = 3] = \"four\";\n})(EShip || (EShip = {}));\n\nexport let EInitScreen = (_class = (_temp = class EInitScreen {\n  constructor(field) {\n    _initializerDefineProperty(this, \"tempField\", _descriptor, this);\n\n    this.currentShip = {\n      position: undefined,\n      type: EShip.four,\n      rotation: {\n        i: 1,\n        j: 0\n      },\n      num: 0\n    };\n    this.tempField = field.clone();\n  }\n\n  testFree(filed, point) {\n    for (let i = point.i == 0 ? 0 : -1; i < 2 - Math.floor(point.i / 9); i++) {\n      for (let j = point.i == 0 ? 0 : -1; j < 2 - Math.floor(point.i / 9); j++) {\n        if (filed.getCell(point.i + i, point.j + j) == ECellType.withShip) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  addCurrentShip(field) {\n    if (this.currentShip.position != undefined) {\n      const axis = {\n        i: this.currentShip.rotation.i,\n        j: this.currentShip.rotation.j\n      };\n      const i = this.currentShip.position.i;\n      const j = this.currentShip.position.j;\n      const minPoint = 0;\n      const maxPoint = this.currentShip.type;\n\n      for (let k = minPoint; k <= maxPoint; k++) {\n        const currentPoint = {\n          i: 0,\n          j: 0\n        };\n\n        if (k + axis.i * i > 9 || k + axis.j * j > 9) {\n          currentPoint.i = axis.j * i + axis.i * (9 - k + minPoint);\n          currentPoint.j = (9 - k + minPoint) * axis.j + j * axis.i;\n          field.setCell(currentPoint.i, currentPoint.j, ECellType.withShip);\n        } else if (k + axis.i < 0 || k + axis.j < 0) {\n          currentPoint.i = i * axis.j + axis.i * (Math.abs(k) + maxPoint);\n          currentPoint.j = (Math.abs(k) + maxPoint) * axis.j + axis.i * j;\n          field.setCell(currentPoint.i, currentPoint.j, ECellType.withShip);\n        } else {\n          currentPoint.i = i + k * axis.i;\n          currentPoint.j = j + k * axis.j;\n          field.setCell(currentPoint.i, currentPoint.j, ECellType.withShip);\n        }\n      }\n    }\n  }\n\n  inverseRotation() {\n    this.currentShip.rotation.i = 1 - this.currentShip.rotation.i;\n    this.currentShip.rotation.j = 1 - this.currentShip.rotation.j;\n  }\n\n  setCurrentShipPosition(i, j) {\n    this.currentShip.position = {\n      i: i,\n      j: j\n    };\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"tempField\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class.prototype, \"addCurrentShip\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"addCurrentShip\"), _class.prototype)), _class);","map":{"version":3,"sources":["/home/anton/Рабочий стол/projects/sea_battle/src/entities/initScreen.ts"],"names":["observable","action","ECellType","EShip","EInitScreen","constructor","field","currentShip","position","undefined","type","four","rotation","i","j","num","tempField","clone","testFree","filed","point","Math","floor","getCell","withShip","addCurrentShip","axis","minPoint","maxPoint","k","currentPoint","setCell","abs","inverseRotation","setCurrentShipPosition"],"mappings":"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","sourcesContent":["import { observable, action } from 'mobx'\nimport { EField, ECellType } from './field'\n\nexport type TPosition = {\n    i: number\n    j: number\n}\n\nexport enum EShip {\n    one,\n    two,\n    three,\n    four\n}\n\nexport interface ICurrentShip {\n    position?: TPosition\n    type: EShip\n    rotation: TPosition\n    num: number\n}\n\n\nexport class EInitScreen {\n    @observable tempField: EField\n    currentShip: ICurrentShip = {\n        position: undefined,\n        type: EShip.four,\n        rotation: {\n            i: 1,\n            j: 0\n          },\n        num: 0\n    }\n\n    constructor(field: EField) {\n        this.tempField = field.clone()\n    }\n\n    private testFree(filed : EField, point : TPosition) : boolean{\n        for(let i = point.i==0?0:-1; i < 2-Math.floor(point.i/9); i++){\n            for(let j = point.i==0?0:-1; j < 2-Math.floor(point.i/9); j++){\n                if(filed.getCell(point.i + i, point.j + j) == ECellType.withShip){\n                    return true\n                }\n            }\n        }\n        return false\n    }\n\n    @action\n    addCurrentShip(field : EField) : void{\n        if(this.currentShip.position != undefined){ \n            const axis : TPosition = {i: this.currentShip.rotation.i,\n                                      j: this.currentShip.rotation.j}\n            const i : number = this.currentShip.position.i\n            const j : number = this.currentShip.position.j\n            const minPoint : number = 0\n            const maxPoint : number = this.currentShip.type\n            for(let k = minPoint; k <= maxPoint; k++){\n                const currentPoint : TPosition = {\n                    i: 0,\n                    j: 0\n                }\n                if(k + axis.i*i > 9 || k + axis.j*j > 9){\n                    currentPoint.i = axis.j * i + axis.i * (9 - k + minPoint)\n                    currentPoint.j = (9 - k + minPoint) * axis.j + j * axis.i\n                    field.setCell(currentPoint.i, currentPoint.j, ECellType.withShip)\n                }else if(k + axis.i < 0 || k + axis.j < 0){\n                    currentPoint.i = i * axis.j + axis.i * (Math.abs(k) + maxPoint)\n                    currentPoint.j = (Math.abs(k) + maxPoint) * axis.j + axis.i * j\n                    field.setCell(currentPoint.i, currentPoint.j, ECellType.withShip)\n                }else{\n                    currentPoint.i = i + k * axis.i\n                    currentPoint.j = j + k * axis.j\n                    field.setCell(currentPoint.i, currentPoint.j, ECellType.withShip)\n                }\n            }\n        }\n    }\n\n    inverseRotation() : void{\n        this.currentShip.rotation.i = 1 - this.currentShip.rotation.i\n        this.currentShip.rotation.j = 1 - this.currentShip.rotation.j\n    }\n\n    setCurrentShipPosition(i: number, j: number){\n        this.currentShip.position = {\n            i: i,\n            j: j\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}