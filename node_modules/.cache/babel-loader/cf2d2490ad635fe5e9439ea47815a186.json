{"ast":null,"code":"import _initializerDefineProperty from \"/home/anton/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/projects/sea_battle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/home/anton/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/projects/sea_battle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/home/anton/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/projects/sea_battle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _temp;\n\nimport cloneDeep from 'lodash/fp/cloneDeep';\nimport range from 'lodash/fp/range';\nimport { observable, action } from 'mobx';\nexport let ECellType;\n\n(function (ECellType) {\n  ECellType[ECellType[\"empty\"] = 0] = \"empty\";\n  ECellType[ECellType[\"withShip\"] = 1] = \"withShip\";\n  ECellType[ECellType[\"missed\"] = 2] = \"missed\";\n  ECellType[ECellType[\"hitted\"] = 3] = \"hitted\";\n})(ECellType || (ECellType = {}));\n\nexport let EField = (_class = (_temp = class EField {\n  static makeInitialField() {\n    return new EField(range(0, 10).map(() => range(0, 10).map(() => ECellType.empty)));\n  }\n\n  constructor(cells) {\n    _initializerDefineProperty(this, \"cells\", _descriptor, this);\n\n    this.cells = cells;\n  }\n\n  setCell(i, j, value) {\n    this.cells[i][j] = value;\n  }\n\n  getCell(i, j) {\n    return this.cells[i][j];\n  }\n\n  getCells() {\n    return this.cells;\n  }\n\n  clone() {\n    return new EField(cloneDeep(this.getCells()));\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"cells\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class.prototype, \"setCell\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setCell\"), _class.prototype)), _class);\nexport const field = EField.makeInitialField();","map":{"version":3,"sources":["/home/anton/Рабочий стол/projects/sea_battle/src/entities/field.ts"],"names":["cloneDeep","range","observable","action","ECellType","EField","makeInitialField","map","empty","constructor","cells","setCell","i","j","value","getCell","getCells","clone","field"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,qBAAtB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,SAASC,UAAT,EAAqBC,MAArB,QAAmC,MAAnC;AAGA,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AAOZ,WAAaC,MAAb,sBAAO,MAAMA,MAAN,CAAa;AAChB,SAAOC,gBAAP,GAA0B;AACtB,WAAO,IAAID,MAAJ,CAAWJ,KAAK,CAAC,CAAD,EAAI,EAAJ,CAAL,CAAaM,GAAb,CAAiB,MAC/BN,KAAK,CAAC,CAAD,EAAI,EAAJ,CAAL,CAAaM,GAAb,CAAiB,MAAMH,SAAS,CAACI,KAAjC,CADc,CAAX,CAAP;AAGH;;AAIDC,EAAAA,WAAW,CAACC,KAAD,EAAuB;AAAA;;AAC9B,SAAKA,KAAL,GAAaA,KAAb;AACH;;AAGDC,EAAAA,OADA,CACQC,CADR,EACmBC,CADnB,EAC8BC,KAD9B,EACgD;AAC5C,SAAKJ,KAAL,CAAWE,CAAX,EAAcC,CAAd,IAAmBC,KAAnB;AACH;;AAEDC,EAAAA,OAAO,CAACH,CAAD,EAAYC,CAAZ,EAAuB;AAC1B,WAAO,KAAKH,KAAL,CAAWE,CAAX,EAAcC,CAAd,CAAP;AACH;;AAEDG,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKN,KAAZ;AACH;;AAEDO,EAAAA,KAAK,GAAG;AACJ,WAAO,IAAIZ,MAAJ,CAAWL,SAAS,CAAC,KAAKgB,QAAL,EAAD,CAApB,CAAP;AACH;;AA5Be,CAApB,+EAOKd,UAPL;AAAA;AAAA;AAAA;AAAA;AAAA,4DAaKC,MAbL;AAgCA,OAAO,MAAMe,KAAK,GAAGb,MAAM,CAACC,gBAAP,EAAd","sourcesContent":["import cloneDeep from 'lodash/fp/cloneDeep'\nimport range from 'lodash/fp/range'\nimport { observable, action } from 'mobx';\n\n\nexport enum ECellType {\n    empty,\n    withShip,\n    missed,\n    hitted\n}\n\nexport class EField {\n    static makeInitialField() {\n        return new EField(range(0, 10).map(() =>\n            range(0, 10).map(() => ECellType.empty)\n        ));\n    }\n\n    @observable private cells: ECellType[][];\n\n    constructor(cells: ECellType[][]) {\n        this.cells = cells;\n    }\n\n    @action\n    setCell(i: number, j: number, value: ECellType) {\n        this.cells[i][j] = value\n    }\n\n    getCell(i: number, j: number) {\n        return this.cells[i][j]\n    }\n\n    getCells() {\n        return this.cells;\n    }\n\n    clone() {\n        return new EField(cloneDeep(this.getCells()))\n    }\n\n}\n\nexport const field = EField.makeInitialField()"]},"metadata":{},"sourceType":"module"}