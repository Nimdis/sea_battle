{"ast":null,"code":"var _jsxFileName = \"/home/anton/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/projects/sea_battle/src/screens/InitScreen.tsx\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Field } from '../components/Field';\nimport { Cell } from '../components/Cell';\nimport { ECellType } from '../entities/field';\nimport { cloneDeepWith, cloneDeep } from \"lodash\";\nconst Row = styled.div`\ndisplay: flex;\n`;\nvar EShip;\n\n(function (EShip) {\n  EShip[EShip[\"one\"] = 0] = \"one\";\n  EShip[EShip[\"two\"] = 1] = \"two\";\n  EShip[EShip[\"three\"] = 2] = \"three\";\n  EShip[EShip[\"four\"] = 3] = \"four\";\n})(EShip || (EShip = {}));\n\nconst MAX_COUNT_BY_SHIP_TYPE = {\n  [EShip.four]: 1,\n  [EShip.three]: 2,\n  [EShip.two]: 3,\n  [EShip.one]: 4\n};\nexport const InitScreen = ({\n  field,\n  onFieldChange\n}) => {\n  console.log(\"rerender\");\n  const [cells, setCells] = useState(field.cells);\n  const [shipsState, setShipsState] = useState();\n  const [currentShip, setCurrentShip] = useState({\n    position: undefined,\n    type: EShip.four,\n    rotation: {\n      i: 1,\n      j: 0\n    }\n  });\n  const [prevPostion, setPrevPosition] = useState();\n  const handleMouseOver = useCallback((i, j) => () => {\n    console.log(0);\n    setCells(cloneDeepWith(field, value => {\n      const a = cloneDeep(value);\n      const axis = i * currentShip.rotation.i + currentShip.rotation.j * j;\n      const minPoint = -1;\n      const maxPoint = currentShip.type - 1;\n\n      for (let x = minPoint; x <= maxPoint; x++) {\n        if (x + axis > 9) {\n          a.cells[currentShip.rotation.j * i + currentShip.rotation.i * (9 - x - minPoint)][(9 - x - minPoint) * currentShip.rotation.j + j * currentShip.rotation.i] = ECellType.withShip;\n        } else if (x + axis < 0) {\n          a.cells[i * currentShip.rotation.j + currentShip.rotation.i * (Math.abs(x) + minPoint)][(Math.abs(x) + minPoint) * currentShip.rotation.j + currentShip.rotation.i * j] = ECellType.withShip;\n        } else {\n          a.cells[i + x * currentShip.rotation.i][j + x * currentShip.rotation.j] = ECellType.withShip;\n        }\n      }\n\n      return a.cells;\n    })); // TODO\n    // change field with onFieldChange\n  }, [cells]);\n  const handleOnClick = useCallback((i, j) => () => {\n    onFieldChange(cloneDeep({\n      cells: cells\n    }));\n  }, [field]);\n  useEffect(() => {\n    document.addEventListener('keypress', e => {\n      console.log(2);\n\n      if (e.keyCode === 32) {\n        console.log(3);\n        setCurrentShip(cloneDeepWith(currentShip, value => {\n          //    const a : ICurrentShip = cloneDeep(value)\n          //    a.rotation.i = 1-a.rotation.i\n          //    a.rotation.j = 1-a.rotation.j\n          //    return a\n          return cloneDeep(currentShip);\n        }));\n      }\n    });\n  }, [currentShip]); // TODO\n  // space pressed\n  // click\n\n  return /*#__PURE__*/React.createElement(Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, cells.map((row, i) => /*#__PURE__*/React.createElement(Row, {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, row.map((type, j) => /*#__PURE__*/React.createElement(Cell, {\n    type: type,\n    key: `${i}-${j}`,\n    onMouseOver: handleMouseOver(i, j),\n    onClick: handleOnClick(i, j),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 25\n    }\n  })))));\n};","map":{"version":3,"sources":["/home/anton/Рабочий стол/projects/sea_battle/src/screens/InitScreen.tsx"],"names":["React","useState","useCallback","useEffect","styled","Field","Cell","ECellType","cloneDeepWith","cloneDeep","Row","div","EShip","MAX_COUNT_BY_SHIP_TYPE","four","three","two","one","InitScreen","field","onFieldChange","console","log","cells","setCells","shipsState","setShipsState","currentShip","setCurrentShip","position","undefined","type","rotation","i","j","prevPostion","setPrevPosition","handleMouseOver","value","a","axis","minPoint","maxPoint","x","withShip","Math","abs","handleOnClick","document","addEventListener","e","keyCode","map","row"],"mappings":"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","sourcesContent":["import React, { FC, useState, useCallback, useEffect } from 'react'\n\nimport styled from 'styled-components'\n\nimport { Field } from '../components/Field'\nimport { Cell } from '../components/Cell'\nimport { IField, ECellType } from '../entities/field'\nimport { cloneDeepWith, cloneDeep } from \"lodash\"\nimport { Console } from 'console'\n\nconst Row = styled.div`\ndisplay: flex;\n`\n\ntype TPosition = {\n    i: number\n    j: number\n}\n\nexport interface IInitScreenProps {\n    field: IField\n    onFieldChange: (field: IField) => void\n}\n\nenum EShip {\n    one,\n    two,\n    three,\n    four\n}\n\ntype IShipsState = Record<EShip, {\n    count: number\n    placedShips: TPosition[]\n}>\n\ninterface ICurrentShip {\n    position?: TPosition\n    type: EShip\n    rotation: TPosition\n}\n\nconst MAX_COUNT_BY_SHIP_TYPE = {\n  [EShip.four]: 1,\n  [EShip.three]: 2,\n  [EShip.two]: 3,\n  [EShip.one]: 4,\n}\n\nexport const InitScreen: FC<IInitScreenProps> = ({ field, onFieldChange }) => {\n    console.log(\"rerender\")\n    const [cells, setCells] = useState<ECellType[][]>(field.cells)\n    const [shipsState, setShipsState] = useState<IShipsState>();\n    const [currentShip, setCurrentShip] = useState<ICurrentShip>({\n      position: undefined,\n      type: EShip.four,\n      rotation: {\n          i: 1,\n          j: 0\n        }\n    });\n\n    const [prevPostion, setPrevPosition] = useState<TPosition>()\n\n    const handleMouseOver = useCallback((i: number, j: number) => () => {\n        console.log(0)\n        setCells(cloneDeepWith(field, (value : IField) => {\n            const a : IField = cloneDeep(value)  \n            const axis = i * currentShip.rotation.i + currentShip.rotation.j * j\n            const minPoint : number = -1 \n            const maxPoint : number = currentShip.type-1\n            for(let x = minPoint; x <= maxPoint; x++){\n                if(x + axis > 9){\n                    a.cells[currentShip.rotation.j*i+currentShip.rotation.i*(9-x-minPoint)][(9-x-minPoint)*currentShip.rotation.j+j*currentShip.rotation.i] = ECellType.withShip;\n                }else if(x + axis < 0){\n                    a.cells[i * currentShip.rotation.j + currentShip.rotation.i * (Math.abs(x) + minPoint)][(Math.abs(x) + minPoint) * currentShip.rotation.j + currentShip.rotation.i * j] = ECellType.withShip;\n                }else{\n                    a.cells[i + x * currentShip.rotation.i][j + x * currentShip.rotation.j] = ECellType.withShip;\n                }\n            }\n            return a.cells\n        }))\n        \n      // TODO\n      // change field with onFieldChange\n    }, [cells])\n\n    const handleOnClick = useCallback((i: number, j: number) => () => {\n        onFieldChange(cloneDeep({cells: cells}))\n    }, [field])\n\n    useEffect(() => {\n        document.addEventListener('keypress', e => {\n          console.log(2)\n          if (e.keyCode === 32) {\n            console.log(3)\n            setCurrentShip(cloneDeepWith(currentShip, (value : ICurrentShip) => {\n            //    const a : ICurrentShip = cloneDeep(value)\n            //    a.rotation.i = 1-a.rotation.i\n            //    a.rotation.j = 1-a.rotation.j\n            //    return a\n                return cloneDeep(currentShip)\n            }))\n          }\n      })\n    }, [currentShip])\n\n    // TODO\n    // space pressed\n    // click\n\n\n    return (\n        <Field>\n            {cells.map((row, i) => (\n                <Row key={i}>\n                    {row.map((type, j) => (\n                        <Cell\n                          type={type}\n                          key={`${i}-${j}`}\n                          onMouseOver={handleMouseOver(i, j)}\n                          onClick={handleOnClick(i, j)}\n                          />\n                     ))}\n                </Row>\n            ))}\n        </Field>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}